{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maheshkokare/excel_processing_FE/src/components/ImportFile.jsx\";\nimport React from \"react\";\nimport { Upload, message, Button } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport readXlsxFile from \"read-excel-file\";\nimport { getColumnSearchProps, sortDates } from \"../utils/helper\";\n\nconst getProps = (setColumns, setDataSource) => ({\n  name: \"file\",\n\n  //action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n  //   headers: {\n  //     authorization: \"authorization-text\",\n  //   },\n  onChange(info) {\n    if (info.file.status === \"done\") {} else if (info.file.status === \"error\") {\n      message.success(`${info.file.name} file uploaded successfully`);\n      readXlsxFile(info.file.originFileObj).then(rows => {\n        const [column, ...data] = rows;\n        const columns = column.map((c, i) => ({\n          title: c,\n          dataIndex: c,\n          width: 200,\n          editable: true,\n          ...getColumnSearchProps(c),\n          key: c,\n          sorter: (a, b) => {\n            // if (a && !b) return a;\n            // else if (b && !a) return b;\n            // else if (!b && !a) return a;\n            // else if (a instanceof Date) return sortDates(a, b);\n            // else if (Number(a)) return b - a;\n            // else {\n            //   debugger;\n            if (b && a) {\n              return a[column[i]].toLowerCase().localeCompare(b[column[i]].toLowerCase());\n            }\n          }\n        }));\n        const dateIndices = [],\n              numberIndices = [];\n        setDataSource(data.map((r, j) => {\n          const row = {\n            index: j + 1\n          };\n          columns.forEach((c, i) => {\n            if (r[i] instanceof Date) dateIndices.push(i);else if (Number(r[i])) numberIndices.push(i);\n            row[c.title] = r[i] && r[i].toString();\n          });\n          return row;\n        }));\n        dateIndices.forEach(i => {\n          columns[i] = { ...columns[i],\n            sorter: (a, b) => sortDates(a[columns[i].dataIndex], b[columns[i].dataIndex])\n          };\n        });\n        numberIndices.forEach(i => {\n          columns[i] = { ...columns[i],\n            sorter: (a, b) => {\n              if (b && a) return a[columns[i].dataIndex] - b[columns[i].dataIndex];\n            }\n          };\n        });\n        setColumns([{\n          title: \"S.No\",\n          dataIndex: \"index\",\n          width: 100\n        }, ...columns]);\n      });\n    }\n  },\n\n  accept: \".xlsx, .xls\",\n  showUploadList: false\n});\n\nconst ImportFile = ({\n  setColumns,\n  setDataSource\n}) => {\n  return /*#__PURE__*/_jsxDEV(Upload, { ...getProps(setColumns, setDataSource),\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this),\n      children: \"Click to Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ImportFile;\nexport default ImportFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImportFile\");","map":{"version":3,"sources":["/Users/maheshkokare/excel_processing_FE/src/components/ImportFile.jsx"],"names":["React","Upload","message","Button","UploadOutlined","readXlsxFile","getColumnSearchProps","sortDates","getProps","setColumns","setDataSource","name","onChange","info","file","status","success","originFileObj","then","rows","column","data","columns","map","c","i","title","dataIndex","width","editable","key","sorter","a","b","toLowerCase","localeCompare","dateIndices","numberIndices","r","j","row","index","forEach","Date","push","Number","toString","accept","showUploadList","ImportFile"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Upload, message, Button } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport readXlsxFile from \"read-excel-file\";\nimport { getColumnSearchProps, sortDates } from \"../utils/helper\";\n\nconst getProps = (setColumns, setDataSource) => ({\n  name: \"file\",\n  //action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n  //   headers: {\n  //     authorization: \"authorization-text\",\n  //   },\n  onChange(info) {\n    if (info.file.status === \"done\") {\n    } else if (info.file.status === \"error\") {\n      message.success(`${info.file.name} file uploaded successfully`);\n      readXlsxFile(info.file.originFileObj).then((rows) => {\n        const [column, ...data] = rows;\n        const columns = column.map((c, i) => ({\n          title: c,\n          dataIndex: c,\n          width: 200,\n          editable: true,\n          ...getColumnSearchProps(c),\n          key: c,\n          sorter: (a, b) => {\n            // if (a && !b) return a;\n            // else if (b && !a) return b;\n            // else if (!b && !a) return a;\n            // else if (a instanceof Date) return sortDates(a, b);\n            // else if (Number(a)) return b - a;\n            // else {\n            //   debugger;\n            if (b && a) {\n              return a[column[i]]\n                .toLowerCase()\n                .localeCompare(b[column[i]].toLowerCase());\n            }\n          },\n        }));\n        const dateIndices = [],\n          numberIndices = [];\n        setDataSource(\n          data.map((r, j) => {\n            const row = { index: j + 1 };\n            columns.forEach((c, i) => {\n              if (r[i] instanceof Date) dateIndices.push(i);\n              else if (Number(r[i])) numberIndices.push(i);\n              row[c.title] = r[i] && r[i].toString();\n            });\n            return row;\n          })\n        );\n        dateIndices.forEach((i) => {\n          columns[i] = {\n            ...columns[i],\n            sorter: (a, b) =>\n              sortDates(a[columns[i].dataIndex], b[columns[i].dataIndex]),\n          };\n        });\n        numberIndices.forEach((i) => {\n          columns[i] = {\n            ...columns[i],\n            sorter: (a, b) => {\n              if (b && a)\n                return a[columns[i].dataIndex] - b[columns[i].dataIndex];\n            },\n          };\n        });\n        setColumns([\n          { title: \"S.No\", dataIndex: \"index\", width: 100 },\n          ...columns,\n        ]);\n      });\n    }\n  },\n  accept: \".xlsx, .xls\",\n  showUploadList: false,\n});\n\nconst ImportFile = ({ setColumns, setDataSource }) => {\n  return (\n    <Upload {...getProps(setColumns, setDataSource)}>\n      <Button icon={<UploadOutlined />}>Click to Upload</Button>\n    </Upload>\n  );\n};\n\nexport default ImportFile;\n"]},"metadata":{},"sourceType":"module"}