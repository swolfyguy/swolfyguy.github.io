{"ast":null,"code":"import { ExportToCsv } from \"export-to-csv\";\nexport const exportToCsv = dataSource => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n  };\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(dataSource.map(item => {\n    const {\n      index,\n      ...data\n    } = item;\n    return data;\n  }));\n};","map":{"version":3,"sources":["/Users/maheshkokare/excel_processing_FE/src/utils/helper.js"],"names":["ExportToCsv","exportToCsv","dataSource","options","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","csvExporter","generateCsv","map","item","index","data"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB;AACzC,QAAMC,OAAO,GAAG;AACdC,IAAAA,cAAc,EAAE,GADF;AAEdC,IAAAA,YAAY,EAAE,GAFA;AAGdC,IAAAA,gBAAgB,EAAE,GAHJ;AAIdC,IAAAA,UAAU,EAAE,IAJE;AAKdC,IAAAA,SAAS,EAAE,IALG;AAMdC,IAAAA,KAAK,EAAE,gBANO;AAOdC,IAAAA,WAAW,EAAE,KAPC;AAQdC,IAAAA,MAAM,EAAE,IARM;AASdC,IAAAA,gBAAgB,EAAE,IATJ,CAUd;;AAVc,GAAhB;AAaA,QAAMC,WAAW,GAAG,IAAIb,WAAJ,CAAgBG,OAAhB,CAApB;AACA,SAAOU,WAAW,CAACC,WAAZ,CACLZ,UAAU,CAACa,GAAX,CAAgBC,IAAD,IAAU;AACvB,UAAM;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAAqBF,IAA3B;AACA,WAAOE,IAAP;AACD,GAHD,CADK,CAAP;AAMD,CArBM","sourcesContent":["import { ExportToCsv } from \"export-to-csv\";\n\nexport const exportToCsv = (dataSource) => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true,\n    // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n  };\n\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(\n    dataSource.map((item) => {\n      const { index, ...data } = item;\n      return data;\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}