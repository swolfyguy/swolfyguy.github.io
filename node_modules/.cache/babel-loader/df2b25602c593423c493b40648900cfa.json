{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maheshkokare/excel_processing_FE/src/utils/helper.js\";\nimport React from \"react\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nexport const exportToCsv = dataSource => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n  };\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(dataSource.map(item => {\n    const {\n      index,\n      ...data\n    } = item;\n    return data;\n  }));\n};\nexport const getColumnSearchProps = dataIndex => ({\n  filterDropdown: ({\n    setSelectedKeys,\n    selectedKeys,\n    confirm,\n    clearFilters\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 8\n    },\n    children: /*#__PURE__*/_jsxDEV(Input //   ref={node => {\n    //     this.searchInput = node;\n    //   }}\n    , {\n      placeholder: `Search ${dataIndex}`,\n      value: selectedKeys[0],\n      onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n      onPressEnter: confirm,\n      style: {\n        width: 188,\n        marginBottom: 8,\n        display: \"block\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this),\n  filterIcon: filtered => /*#__PURE__*/_jsxDEV(SearchOutlined, {\n    style: {\n      color: filtered ? \"#1890ff\" : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this),\n  onFilter: (value, record) => record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : \"\",\n  onFilterDropdownVisibleChange: visible => {\n    debugger;\n\n    if (visible) {\n      setTimeout(() => this.searchInput.select(), 100);\n    }\n  }\n});","map":{"version":3,"sources":["/Users/maheshkokare/excel_processing_FE/src/utils/helper.js"],"names":["React","ExportToCsv","Input","SearchOutlined","exportToCsv","dataSource","options","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","csvExporter","generateCsv","map","item","index","data","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","e","target","value","width","marginBottom","display","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","searchInput","select"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB;AACzC,QAAMC,OAAO,GAAG;AACdC,IAAAA,cAAc,EAAE,GADF;AAEdC,IAAAA,YAAY,EAAE,GAFA;AAGdC,IAAAA,gBAAgB,EAAE,GAHJ;AAIdC,IAAAA,UAAU,EAAE,IAJE;AAKdC,IAAAA,SAAS,EAAE,IALG;AAMdC,IAAAA,KAAK,EAAE,gBANO;AAOdC,IAAAA,WAAW,EAAE,KAPC;AAQdC,IAAAA,MAAM,EAAE,IARM;AASdC,IAAAA,gBAAgB,EAAE,IATJ,CAUd;;AAVc,GAAhB;AAaA,QAAMC,WAAW,GAAG,IAAIf,WAAJ,CAAgBK,OAAhB,CAApB;AACA,SAAOU,WAAW,CAACC,WAAZ,CACLZ,UAAU,CAACa,GAAX,CAAgBC,IAAD,IAAU;AACvB,UAAM;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAAqBF,IAA3B;AACA,WAAOE,IAAP;AACD,GAHD,CADK,CAAP;AAMD,CArBM;AAuBP,OAAO,MAAMC,oBAAoB,GAAIC,SAAD,KAAgB;AAClDC,EAAAA,cAAc,EAAE,CAAC;AACfC,IAAAA,eADe;AAEfC,IAAAA,YAFe;AAGfC,IAAAA,OAHe;AAIfC,IAAAA;AAJe,GAAD,kBAMd;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA,2BACE,QAAC,KAAD,CACE;AACA;AACA;AAHF;AAIE,MAAA,WAAW,EAAG,UAASN,SAAU,EAJnC;AAKE,MAAA,KAAK,EAAEG,YAAY,CAAC,CAAD,CALrB;AAME,MAAA,QAAQ,EAAGI,CAAD,IACRL,eAAe,CAACK,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAACF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CAPnB;AASE,MAAA,YAAY,EAAEL,OAThB;AAUE,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,YAAY,EAAE,CAA5B;AAA+BC,QAAAA,OAAO,EAAE;AAAxC;AAVT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAPgD;AAoClDC,EAAAA,UAAU,EAAGC,QAAD,iBACV,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAED,QAAQ,GAAG,SAAH,GAAeE;AAAhC;AAAvB;AAAA;AAAA;AAAA;AAAA,UArCgD;AAuClDC,EAAAA,QAAQ,EAAE,CAACR,KAAD,EAAQS,MAAR,KACRA,MAAM,CAAClB,SAAD,CAAN,GACIkB,MAAM,CAAClB,SAAD,CAAN,CAAkBmB,QAAlB,GAA6BC,WAA7B,GAA2CC,QAA3C,CAAoDZ,KAAK,CAACW,WAAN,EAApD,CADJ,GAEI,EA1C4C;AA2ClDE,EAAAA,6BAA6B,EAAGC,OAAD,IAAa;AAC1C;;AACA,QAAIA,OAAJ,EAAa;AACXC,MAAAA,UAAU,CAAC,MAAM,KAAKC,WAAL,CAAiBC,MAAjB,EAAP,EAAkC,GAAlC,CAAV;AACD;AACF;AAhDiD,CAAhB,CAA7B","sourcesContent":["import React from \"react\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nexport const exportToCsv = (dataSource) => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true,\n    // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n  };\n\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(\n    dataSource.map((item) => {\n      const { index, ...data } = item;\n      return data;\n    })\n  );\n};\n\nexport const getColumnSearchProps = (dataIndex) => ({\n  filterDropdown: ({\n    setSelectedKeys,\n    selectedKeys,\n    confirm,\n    clearFilters,\n  }) => (\n    <div style={{ padding: 8 }}>\n      <Input\n        //   ref={node => {\n        //     this.searchInput = node;\n        //   }}\n        placeholder={`Search ${dataIndex}`}\n        value={selectedKeys[0]}\n        onChange={(e) =>\n          setSelectedKeys(e.target.value ? [e.target.value] : [])\n        }\n        onPressEnter={confirm}\n        style={{ width: 188, marginBottom: 8, display: \"block\" }}\n      />\n      {/* <Space>\n          <Button\n            type=\"primary\"\n            //onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space> */}\n    </div>\n  ),\n  filterIcon: (filtered) => (\n    <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n  ),\n  onFilter: (value, record) =>\n    record[dataIndex]\n      ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n      : \"\",\n  onFilterDropdownVisibleChange: (visible) => {\n    debugger;\n    if (visible) {\n      setTimeout(() => this.searchInput.select(), 100);\n    }\n  },\n});\n"]},"metadata":{},"sourceType":"module"}