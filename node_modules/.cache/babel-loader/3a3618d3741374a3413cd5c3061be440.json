{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/maheshkokare/excel_processing_FE/src/utils/helper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nexport const exportToCsv = dataSource => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n  };\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(dataSource.map(item => {\n    const {\n      index,\n      ...data\n    } = item;\n    return data;\n  }));\n};\nexport const getColumnSearchProps = dataIndex => {\n  _s();\n\n  const reff = useRef();\n  return {\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(Input //   ref={node => {\n      //     this.searchInput = node;\n      //   }}\n      , {\n        ref: reff,\n        placeholder: `Search ${dataIndex}`,\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: confirm,\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this),\n    filterIcon: filtered => /*#__PURE__*/_jsxDEV(SearchOutlined, {\n      style: {\n        color: filtered ? \"#1890ff\" : undefined\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this),\n    onFilter: (value, record) => record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : \"\",\n    filterDropdownVisible: false,\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => reff.current.select(), 100);\n      }\n    }\n  };\n};\n\n_s(getColumnSearchProps, \"1STUVhKEIaAGXoU1sHm8o5MbheE=\");","map":{"version":3,"sources":["/Users/maheshkokare/excel_processing_FE/src/utils/helper.js"],"names":["React","useRef","ExportToCsv","Input","SearchOutlined","exportToCsv","dataSource","options","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","csvExporter","generateCsv","map","item","index","data","getColumnSearchProps","dataIndex","reff","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","e","target","value","width","marginBottom","display","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","filterDropdownVisible","onFilterDropdownVisibleChange","visible","setTimeout","current","select"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB;AACzC,QAAMC,OAAO,GAAG;AACdC,IAAAA,cAAc,EAAE,GADF;AAEdC,IAAAA,YAAY,EAAE,GAFA;AAGdC,IAAAA,gBAAgB,EAAE,GAHJ;AAIdC,IAAAA,UAAU,EAAE,IAJE;AAKdC,IAAAA,SAAS,EAAE,IALG;AAMdC,IAAAA,KAAK,EAAE,gBANO;AAOdC,IAAAA,WAAW,EAAE,KAPC;AAQdC,IAAAA,MAAM,EAAE,IARM;AASdC,IAAAA,gBAAgB,EAAE,IATJ,CAUd;;AAVc,GAAhB;AAaA,QAAMC,WAAW,GAAG,IAAIf,WAAJ,CAAgBK,OAAhB,CAApB;AACA,SAAOU,WAAW,CAACC,WAAZ,CACLZ,UAAU,CAACa,GAAX,CAAgBC,IAAD,IAAU;AACvB,UAAM;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAAqBF,IAA3B;AACA,WAAOE,IAAP;AACD,GAHD,CADK,CAAP;AAMD,CArBM;AAuBP,OAAO,MAAMC,oBAAoB,GAAIC,SAAD,IAAe;AAAA;;AACjD,QAAMC,IAAI,GAAGxB,MAAM,EAAnB;AACA,SAAO;AACLyB,IAAAA,cAAc,EAAE,CAAC;AACfC,MAAAA,eADe;AAEfC,MAAAA,YAFe;AAGfC,MAAAA,OAHe;AAIfC,MAAAA;AAJe,KAAD,kBAMd;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA,6BACE,QAAC,KAAD,CACE;AACA;AACA;AAHF;AAIE,QAAA,GAAG,EAAEN,IAJP;AAKE,QAAA,WAAW,EAAG,UAASD,SAAU,EALnC;AAME,QAAA,KAAK,EAAEI,YAAY,CAAC,CAAD,CANrB;AAOE,QAAA,QAAQ,EAAGI,CAAD,IACRL,eAAe,CAACK,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAACF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CARnB;AAUE,QAAA,YAAY,EAAEL,OAVhB;AAWE,QAAA,KAAK,EAAE;AAAEM,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,YAAY,EAAE,CAA5B;AAA+BC,UAAAA,OAAO,EAAE;AAAxC;AAXT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPG;AAqCLC,IAAAA,UAAU,EAAGC,QAAD,iBACV,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAED,QAAQ,GAAG,SAAH,GAAeE;AAAhC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAtCG;AAwCLC,IAAAA,QAAQ,EAAE,CAACR,KAAD,EAAQS,MAAR,KACRA,MAAM,CAACnB,SAAD,CAAN,GACImB,MAAM,CAACnB,SAAD,CAAN,CACGoB,QADH,GAEGC,WAFH,GAGGC,QAHH,CAGYZ,KAAK,CAACW,WAAN,EAHZ,CADJ,GAKI,EA9CD;AA+CLE,IAAAA,qBAAqB,EAAE,KA/ClB;AAgDLC,IAAAA,6BAA6B,EAAGC,OAAD,IAAa;AAC1C,UAAIA,OAAJ,EAAa;AACXC,QAAAA,UAAU,CAAC,MAAMzB,IAAI,CAAC0B,OAAL,CAAaC,MAAb,EAAP,EAA8B,GAA9B,CAAV;AACD;AACF;AApDI,GAAP;AAsDD,CAxDM;;GAAM7B,oB","sourcesContent":["import React, { useRef } from \"react\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nexport const exportToCsv = (dataSource) => {\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"My Awesome CSV\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true,\n    // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n  };\n\n  const csvExporter = new ExportToCsv(options);\n  return csvExporter.generateCsv(\n    dataSource.map((item) => {\n      const { index, ...data } = item;\n      return data;\n    })\n  );\n};\n\nexport const getColumnSearchProps = (dataIndex) => {\n  const reff = useRef();\n  return {\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          //   ref={node => {\n          //     this.searchInput = node;\n          //   }}\n          ref={reff}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={confirm}\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\n        />\n        {/* <Space>\n          <Button\n            type=\"primary\"\n            //onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={clearFilters} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space> */}\n      </div>\n    ),\n    filterIcon: (filtered) => (\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        : \"\",\n    filterDropdownVisible: false,\n    onFilterDropdownVisibleChange: (visible) => {\n      if (visible) {\n        setTimeout(() => reff.current.select(), 100);\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}